import socket
import threading
import time
import logging



class Broker():
	def __init__(self):
		logging.info('Initializing Server')
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		server_ip=socket.gethostbyname(socket.gethostname())
		print "Server's IP address is: "+ str(server_ip)
		self.sock.bind((server_ip,3123 ))
		self.clients_list = []
	
	def checkquery(self,query):
		m2 = query.split("\r\n")
		m3 = m2[0].split("|")
		request_type = m3[0]
		if request_type == 'Inform and update ':
			ret_type = '1'
		elif request_type == 'Query for content ':
			ret_type = '2'
		elif request_type == 'Exit ':
			ret_type = '3'
		else:
			ret_type = '4'
		return ret_type
	

	def removeclient(self,clientname, add, pck_seq):
		for k,v in direct.items():
			for i in v:
				if i == clientname:
					v.remove(i)
		respok3 = "200 |" + "OK |" +"Thank you \r\n" + "\r\n" + str(pck_seq)
		self.sock.sendto(respok3,add)
		print respok3
		print direct
                
	def talkToClient(self, ip, msg):
		if '|' not in msg:
			self.sock.sendto("You are connected\n",ip)
		else:
				print "inside talk client loop"
				msg, add = self.sock.recvfrom(128)
				print msg
				m2 = msg.split("\r\n")
				pack_seq = m2[len(m2)-1]
				m3 = m2[0].split("|")
				print "####"+m2[0]
				client_name = m3[1]
				client_address[client_name]=ip
				qtype = self.checkquery(msg)
				if qtype == '1':
					self.updatedict( msg, ip, pack_seq )
				elif qtype == '2':
					self.searchkey(msg, ip, pack_seq)
				elif qtype == '3':
					self.removeclient(client_name, ip, pack_seq)
				else:
					self.sock.sendto("400 | Bad request",ip)
				
	def listen_clients(self):
		c1=0
		while True:
			c , address = self.sock.recvfrom(128)
			logging.info('Received data from client %s: %s', address, c)
			t = threading.Thread(target=self.talkToClient, args=(address,c,))
			t.start()
			c1 = c1 + 1

if __name__ == '__main__':
	logging.getLogger().setLevel(logging.DEBUG)
	direct = dict()
	size = dict()
	client_address = dict()
	b = Broker()
	b.listen_clients()
